package main

import (
	"encoding/json"
	"fmt"
	"github.com/allyourbasepair/rbscalculator"
	_ "github.com/allyourbasepair/rbscalculator/api/docs" // API docs generated by swaggo/swag
	"github.com/swaggo/swag"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

// App is a struct containing all information about the currently deployed
// application, such as the database connection string, URL information, and
// routes.
type App struct {
	Router *http.ServeMux
}

func initializeApp() App {
	var app App

	// Basic routes
	app.Router = http.NewServeMux()
	app.Router.HandleFunc("/api/ping", app.Ping)
	app.Router.HandleFunc("/swagger.json", app.SwaggerJSON)
	app.Router.HandleFunc("/docs", app.SwaggerDocs)

	// RBS functions
	app.Router.HandleFunc("/api/rbscalculator", app.RbsCalculator)
	return app
}

// @title RBS calculator API
// @version 0.1
// @description The allyourbasepair RBS calculator. For statistics comparing this RBS calculator to the salis lab calculator, please check https://github.com/allyourbasepair/rbscalculator
// @BasePath /api/
func main() {
	app := initializeApp()
	// Serve application
	s := &http.Server{
		Addr:    ":" + os.Getenv("PORT"),
		Handler: app.Router,
	}
	log.Fatal(s.ListenAndServe())
}

// Ping is a simple route for verifying that the service is online.
// @Summary A pingable endpoint
// @Tags dev
// @Produce plain
// @Success 200 {string} map[string]string
// @Router /ping [get]
func (app *App) Ping(w http.ResponseWriter, r *http.Request) {
	encoder := json.NewEncoder(w)
	_ = encoder.Encode(map[string]string{"message": "Online"})
}

// SwaggerJSON provides the swagger docs for this api in JSON format.
func (app *App) SwaggerJSON(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	doc, _ := swag.ReadDoc()
	_, _ = w.Write([]byte(doc))
}

// SwaggerDocs provides a human-friendly swagger ui interface.
func (app *App) SwaggerDocs(w http.ResponseWriter, r *http.Request) {
	// https://stackoverflow.com/questions/55733609/display-swagger-ui-on-flask-without-any-hookups
	doc, _ := swag.ReadDoc()
	swaggerDoc := fmt.Sprintf(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-standalone-preset.js"></script> -->
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-bundle.js"></script> -->
    <link rel="stylesheet" href="//unpkg.com/swagger-ui-dist@3/swagger-ui.css" />
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui.css" /> -->
    <title>Swagger</title>
</head>
<body>
    <div id="swagger-ui"></div>
    <script>
        window.onload = function() {
          SwaggerUIBundle({
	    spec: %s,
            dom_id: '#swagger-ui',
            presets: [
              SwaggerUIBundle.presets.apis,
              SwaggerUIStandalonePreset
            ],
            layout: "StandaloneLayout"
          })
        }
    </script>
</body>
</html>`, doc)
	_, _ = w.Write([]byte(swaggerDoc))
}

type CalculatorInput struct {
	FivePrimeUtr   string `json:"fivePrimeUtr"`
	CodingSequence string `json:"codingSequence"`
}

// RbsCalculator is a route to calculate ribosomal binding sites
// @Summary calculate a ribosomal binding site
// @Description An RBS calculator, only compatible with E.coli at 37c for now.
// @Tags main
// @Accept json
// @Produce plain
// @Param calculatorInput body CalculatorInput true "inputs to the RBS calculator"
// @Success 200 {string} string
// @Failure 400 {string} string
// @Router /rbscalculator [post]
func (app *App) RbsCalculator(w http.ResponseWriter, r *http.Request) {
	// Unmarshal
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.WriteHeader(400)
		_ = json.NewEncoder(w).Encode(err.Error())
		return
	}
	var calculatorInput CalculatorInput
	err = json.Unmarshal(reqBody, &calculatorInput)
	if err != nil {
		w.WriteHeader(400)
		_ = json.NewEncoder(w).Encode(err.Error())
		return
	}

	// Calculate
	fivePrimeUTR := strings.ReplaceAll(strings.ToUpper(calculatorInput.FivePrimeUtr), "T", "U")
	codingSequence := strings.ReplaceAll(strings.ToUpper(calculatorInput.CodingSequence), "T", "U")
	tir, err := rbscalculator.RibosomeBindingSiteDefined5UTR(fivePrimeUTR, codingSequence)
	if err != nil {
		w.WriteHeader(400)
		_ = json.NewEncoder(w).Encode(err.Error())
		return
	}
	_ = json.NewEncoder(w).Encode(tir)
	return
}
